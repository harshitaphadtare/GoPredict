name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    defaults:
      run:
        working-directory: ./frontend
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        run: npm install -g pnpm
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - run: pnpm install --frozen-lockfile
      - run: pnpm run typecheck
      - run: pnpm run test:run
      - run: pnpm run test:coverage
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ env.CODECOV_TOKEN }}
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    defaults:
      run:
        working-directory: ./backend
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        run: npm install -g pnpm
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - run: pnpm install --frozen-lockfile
      - run: pnpm test
      - run: pnpm run test:coverage
      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ env.CODECOV_TOKEN }}
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  python-ml-tests:
    name: Python ML Pipeline Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      - name: Install coverage for Python
        run: pip install coverage
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - run: |
          if [ -d "tests" ] || [ -f "test_*.py" ] || find . -name "*_test.py" | grep -q .; then
            python -m pytest --cov=src --cov-report=xml --cov-report=term
          else
            echo "No Python tests found, skipping..."
          fi
      - run: |
          python -m py_compile main.py
          python -m py_compile config.py
          find src -name "*.py" -exec python -m py_compile {} \;

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        run: npm install -g pnpm
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "pnpm"
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - run: pnpm install --frozen-lockfile  # root workspace install
      - name: Start backend (requires secrets)
        if: github.event_name != 'pull_request'
        run: pnpm --filter gopredict-backend start > backend.log 2>&1 &
        env:
          PORT: 8000
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: 'development'
      - name: Wait for backend to be ready
        if: github.event_name != 'pull_request'
        run: |
          echo "Waiting for backend to be ready..."
          for i in {1..60}; do
            if curl -fsS http://localhost:8000/api/health >/dev/null; then
              echo "Backend is up"; break; fi
            sleep 1
          done
          curl -f http://localhost:8000/api/health
      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile
        working-directory: frontend
      - run: pnpm --filter gopredict-frontend build
        env:
          VITE_API_URL: http://localhost:8000
